
yeni_workspace_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000518  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006dc  080006e4  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  000016e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006dc  080006dc  000016e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006dc  080006e4  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000016dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006e0  080006e0  000016e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000108b  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000497  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00002c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000091  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4cc  00000000  00000000  00002da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000195d  00000000  00000000  0002226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2790  00000000  00000000  00023bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e635a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  000e63a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e65e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080006c4 	.word	0x080006c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080006c4 	.word	0x080006c4

08000204 <main>:
#include "stm32f4xx_hal.h"

void GPIO_Config(void);
void delay(uint32_t delayVal);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	GPIO_Config();
 8000208:	f000 f80e 	bl	8000228 <GPIO_Config>

	while(1){

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800020c:	2120      	movs	r1, #32
 800020e:	4804      	ldr	r0, [pc, #16]	@ (8000220 <main+0x1c>)
 8000210:	f000 fa1a 	bl	8000648 <HAL_GPIO_TogglePin>
		delay(500000);
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <main+0x20>)
 8000216:	f000 f831 	bl	800027c <delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800021a:	bf00      	nop
 800021c:	e7f6      	b.n	800020c <main+0x8>
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000
 8000224:	0007a120 	.word	0x0007a120

08000228 <GPIO_Config>:
	}
}

void GPIO_Config(){
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	4b10      	ldr	r3, [pc, #64]	@ (8000274 <GPIO_Config+0x4c>)
 8000234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000236:	4a0f      	ldr	r2, [pc, #60]	@ (8000274 <GPIO_Config+0x4c>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6313      	str	r3, [r2, #48]	@ 0x30
 800023e:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <GPIO_Config+0x4c>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]

	 GPIO_InitTypeDef GPIOA_Init = {};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]

	 GPIOA_Init.Pin = GPIO_PIN_5;
 8000258:	2320      	movs	r3, #32
 800025a:	607b      	str	r3, [r7, #4]
	 GPIOA_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800025c:	2301      	movs	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]

	 HAL_GPIO_Init(GPIOA, &GPIOA_Init);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4619      	mov	r1, r3
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <GPIO_Config+0x50>)
 8000266:	f000 f85b 	bl	8000320 <HAL_GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3718      	adds	r7, #24
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000

0800027c <delay>:

void delay(uint32_t delayVal){
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < delayVal; i++){
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e002      	b.n	8000290 <delay+0x14>
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3301      	adds	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d3f8      	bcc.n	800028a <delay+0xe>
	}
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
	...

080002a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <SystemInit+0x20>)
 80002ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002b2:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <SystemInit+0x20>)
 80002b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002d0:	f7ff ffea 	bl	80002a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80002fa:	f000 f9bf 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002fe:	f7ff ff81 	bl	8000204 <main>
  bx  lr    
 8000302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	080006e4 	.word	0x080006e4
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	@ 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
 800033a:	e165      	b.n	8000608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800033c:	2201      	movs	r2, #1
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	4013      	ands	r3, r2
 800034e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	429a      	cmp	r2, r3
 8000356:	f040 8154 	bne.w	8000602 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	f003 0303 	and.w	r3, r3, #3
 8000362:	2b01      	cmp	r3, #1
 8000364:	d005      	beq.n	8000372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800036e:	2b02      	cmp	r3, #2
 8000370:	d130      	bne.n	80003d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	2203      	movs	r2, #3
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	69ba      	ldr	r2, [r7, #24]
 8000386:	4013      	ands	r3, r2
 8000388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	68da      	ldr	r2, [r3, #12]
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	69ba      	ldr	r2, [r7, #24]
 8000398:	4313      	orrs	r3, r2
 800039a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	69ba      	ldr	r2, [r7, #24]
 80003a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003a8:	2201      	movs	r2, #1
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	fa02 f303 	lsl.w	r3, r2, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	69ba      	ldr	r2, [r7, #24]
 80003b4:	4013      	ands	r3, r2
 80003b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	091b      	lsrs	r3, r3, #4
 80003be:	f003 0201 	and.w	r2, r3, #1
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	69ba      	ldr	r2, [r7, #24]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	69ba      	ldr	r2, [r7, #24]
 80003d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	f003 0303 	and.w	r3, r3, #3
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d017      	beq.n	8000410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	2203      	movs	r2, #3
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	43db      	mvns	r3, r3
 80003f2:	69ba      	ldr	r2, [r7, #24]
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	689a      	ldr	r2, [r3, #8]
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	69ba      	ldr	r2, [r7, #24]
 8000406:	4313      	orrs	r3, r2
 8000408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69ba      	ldr	r2, [r7, #24]
 800040e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	f003 0303 	and.w	r3, r3, #3
 8000418:	2b02      	cmp	r3, #2
 800041a:	d123      	bne.n	8000464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	08da      	lsrs	r2, r3, #3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3208      	adds	r2, #8
 8000424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	f003 0307 	and.w	r3, r3, #7
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	220f      	movs	r2, #15
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	43db      	mvns	r3, r3
 800043a:	69ba      	ldr	r2, [r7, #24]
 800043c:	4013      	ands	r3, r2
 800043e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	691a      	ldr	r2, [r3, #16]
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f003 0307 	and.w	r3, r3, #7
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	4313      	orrs	r3, r2
 8000454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	08da      	lsrs	r2, r3, #3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3208      	adds	r2, #8
 800045e:	69b9      	ldr	r1, [r7, #24]
 8000460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	2203      	movs	r2, #3
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	69ba      	ldr	r2, [r7, #24]
 8000478:	4013      	ands	r3, r2
 800047a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f003 0203 	and.w	r2, r3, #3
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	69ba      	ldr	r2, [r7, #24]
 800048e:	4313      	orrs	r3, r2
 8000490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	69ba      	ldr	r2, [r7, #24]
 8000496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f000 80ae 	beq.w	8000602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	4b5d      	ldr	r3, [pc, #372]	@ (8000620 <HAL_GPIO_Init+0x300>)
 80004ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ae:	4a5c      	ldr	r2, [pc, #368]	@ (8000620 <HAL_GPIO_Init+0x300>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80004b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000620 <HAL_GPIO_Init+0x300>)
 80004b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80004c2:	4a58      	ldr	r2, [pc, #352]	@ (8000624 <HAL_GPIO_Init+0x304>)
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	3302      	adds	r3, #2
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	f003 0303 	and.w	r3, r3, #3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	220f      	movs	r2, #15
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	43db      	mvns	r3, r3
 80004e0:	69ba      	ldr	r2, [r7, #24]
 80004e2:	4013      	ands	r3, r2
 80004e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000628 <HAL_GPIO_Init+0x308>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d025      	beq.n	800053a <HAL_GPIO_Init+0x21a>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a4e      	ldr	r2, [pc, #312]	@ (800062c <HAL_GPIO_Init+0x30c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d01f      	beq.n	8000536 <HAL_GPIO_Init+0x216>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a4d      	ldr	r2, [pc, #308]	@ (8000630 <HAL_GPIO_Init+0x310>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d019      	beq.n	8000532 <HAL_GPIO_Init+0x212>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a4c      	ldr	r2, [pc, #304]	@ (8000634 <HAL_GPIO_Init+0x314>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d013      	beq.n	800052e <HAL_GPIO_Init+0x20e>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a4b      	ldr	r2, [pc, #300]	@ (8000638 <HAL_GPIO_Init+0x318>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d00d      	beq.n	800052a <HAL_GPIO_Init+0x20a>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a4a      	ldr	r2, [pc, #296]	@ (800063c <HAL_GPIO_Init+0x31c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d007      	beq.n	8000526 <HAL_GPIO_Init+0x206>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a49      	ldr	r2, [pc, #292]	@ (8000640 <HAL_GPIO_Init+0x320>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <HAL_GPIO_Init+0x202>
 800051e:	2306      	movs	r3, #6
 8000520:	e00c      	b.n	800053c <HAL_GPIO_Init+0x21c>
 8000522:	2307      	movs	r3, #7
 8000524:	e00a      	b.n	800053c <HAL_GPIO_Init+0x21c>
 8000526:	2305      	movs	r3, #5
 8000528:	e008      	b.n	800053c <HAL_GPIO_Init+0x21c>
 800052a:	2304      	movs	r3, #4
 800052c:	e006      	b.n	800053c <HAL_GPIO_Init+0x21c>
 800052e:	2303      	movs	r3, #3
 8000530:	e004      	b.n	800053c <HAL_GPIO_Init+0x21c>
 8000532:	2302      	movs	r3, #2
 8000534:	e002      	b.n	800053c <HAL_GPIO_Init+0x21c>
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <HAL_GPIO_Init+0x21c>
 800053a:	2300      	movs	r3, #0
 800053c:	69fa      	ldr	r2, [r7, #28]
 800053e:	f002 0203 	and.w	r2, r2, #3
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	4093      	lsls	r3, r2
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	4313      	orrs	r3, r2
 800054a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800054c:	4935      	ldr	r1, [pc, #212]	@ (8000624 <HAL_GPIO_Init+0x304>)
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	3302      	adds	r3, #2
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800055a:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <HAL_GPIO_Init+0x324>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	43db      	mvns	r3, r3
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	4013      	ands	r3, r2
 8000568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000572:	2b00      	cmp	r3, #0
 8000574:	d003      	beq.n	800057e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000576:	69ba      	ldr	r2, [r7, #24]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	4313      	orrs	r3, r2
 800057c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800057e:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <HAL_GPIO_Init+0x324>)
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000584:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <HAL_GPIO_Init+0x324>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	43db      	mvns	r3, r3
 800058e:	69ba      	ldr	r2, [r7, #24]
 8000590:	4013      	ands	r3, r2
 8000592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80005a8:	4a26      	ldr	r2, [pc, #152]	@ (8000644 <HAL_GPIO_Init+0x324>)
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <HAL_GPIO_Init+0x324>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	4013      	ands	r3, r2
 80005bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80005ca:	69ba      	ldr	r2, [r7, #24]
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <HAL_GPIO_Init+0x324>)
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_GPIO_Init+0x324>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	43db      	mvns	r3, r3
 80005e2:	69ba      	ldr	r2, [r7, #24]
 80005e4:	4013      	ands	r3, r2
 80005e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <HAL_GPIO_Init+0x324>)
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3301      	adds	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	f67f ae96 	bls.w	800033c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3724      	adds	r7, #36	@ 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40013800 	.word	0x40013800
 8000628:	40020000 	.word	0x40020000
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800
 8000634:	40020c00 	.word	0x40020c00
 8000638:	40021000 	.word	0x40021000
 800063c:	40021400 	.word	0x40021400
 8000640:	40021800 	.word	0x40021800
 8000644:	40013c00 	.word	0x40013c00

08000648 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4013      	ands	r3, r2
 8000660:	041a      	lsls	r2, r3, #16
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	43d9      	mvns	r1, r3
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	400b      	ands	r3, r1
 800066a:	431a      	orrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	619a      	str	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	@ (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	@ (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	@ (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	@ (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f818 	bl	80006c4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006dc 	.word	0x080006dc
 80006b8:	080006dc 	.word	0x080006dc
 80006bc:	080006dc 	.word	0x080006dc
 80006c0:	080006e0 	.word	0x080006e0

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
